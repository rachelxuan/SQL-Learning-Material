MySQL_基础+高级篇- 数据库 -sql -mysql教程_mysql视频_mysql入门_尚硅谷

Module1:
数据库常见概念
DB：保存一组有组织的数据的容器
DBMS：数据库管理系统，又称为数据库软件产品，用于管理DB中的数据
SQL：结构化查询语言(retrive,transform,join,and write data to relational databases)
可以应用于所有的platfroms(mysql,microsoft sql server,Oracle,etc)
Nosql:stands for not only sql.and is often used to describe "big data"platforms that may leverage sql but not relational

数据库存储数据的特点
1.数据库放到表中，表放到库中
2.一个库可以有多张表，每张表具有唯一的表名来标识自己
3.表中有一个或者多个列，列又被称为字段，相当于java中的属性

Centralized databases
centralized databases use a client/server setup
some examples of centralized databases platforms
oracle
microsoft sql server
mysql
postgresSQL
Teradata

Typical Centralized Database setup
for production, you typically use a server computer to host the database rather than a laptop or desktop

Mysql的常见命令
1.查看当前所有的数据库
show databases;
2.打开指定的库
use 库名
3.查看当前库的所有表
show tables;
4.查看其他库的所有表
show tables from 库名;
5.创建表
create table 表名(
    列名,列类型
    列名,列类型
    列名,列类型)
6.查看表结构
    desc 表名;

Module2:
进阶1：查询基础
语法：SELECT 查询语句 FROM 表名；
特点：
1）查询列表可以是:表中的字段，常量值，表达式和函数
2）查询的结果是一个虚拟的表格
USE myemployees;
方式1:查询表中的单个字段
SELECT last_name FROM employees;
方式2:查询表中的多个字段
方式3:查询表中的所有字段
SELECT * FROM employees;
方式4:查询常量
注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要
方式5：查询表达式
SELECT 100*98
方式6：查询函数
SELECT VERSION();
方式7:起别名
as和空格
方式8:去重
select distinct 字段名 from 表名；

/*
便于理解，有重名的时候可以区分开来
*/

#方式一：使用AS
SELECT 100*98 AS 结果;
SELECT last_name AS 姓,first_name AS 名
From employees;

#方式二：使用空格
SELECT last_name 姓,first_name 名
From employees;

＃8.去重
#案例：查询员工表中涉及到的所有的部门编号
SELECT DISTINCT department_id FROM employees;

＃9.+号的作用
#案例：查询员工名和姓连接成一个字段并显示为姓名
/*Java中的＋号；
1.运算符号，两个操作数都为数值型
2.链接符号，只要有一个操作数为字符串

mysql中的＋号
仅仅只有一个功能，运算符号

SELECT 100+90；两个操作数都为数值型，则做加法运算
SELECT '123'+90;其中一方为字符型，试图将字符型数值转换为数值型
如果转换成功，则继续做加法运算，如果转化失败，则将字符型数值转换成0
SELECT ‘john'+90;
SELECT null+10;只要其中一方为null，则结果肯定为null
*/

#案例：查询员工名和姓连接成一个字段，并且显示姓名
SELECT CONCAT('a','b','c') AS 结果
FROM employees;

5.＃显示出表employees中的全部joib_id(不能重复)
SELECT DISTINCT job_id FROM employees;

6.＃显示出表employees中的全部列，各个列之间用逗号连接，列头显示为output)

SELECT 
    IFNULL(commission_pct,0) AS 奖金率,
    commission_pct
From 
    employees;
#---------------------

SELECT
    CONCAT('first_name','last_name','job_id',
    IFnull(commission_pct,0)) AS Out_put
FROM 
    employees;


#进阶2：条件查询
/*
语法：
SELECT 查询列表
FROM 表名
WEHRE 筛选条件

分类：
    一 按条件表达式筛选
    简单条件运算符：> < = <> >= <=
    二 按逻辑表达式筛选
    逻辑运算符：AND OR NOT
    三 模糊查询
    复杂条件运算符
        LIKE 
        BETWEEN
        IN
        IS NULL
*/
案例1：查询部门编号不是在90到110之间，或者工资高于15000的员工信息
SELECT *
FROM employees
WEHRE
    NOT(department_id>=90 AND department_id<=110)
    OR salary>15000;

＃三 模糊查询
/*
Like 
特点：
①一般和通配符搭配使用，可以判断字符型或者数值型
    通配符：
    %任意多个字符，包含0个字符  
    _任意单个字符

Between AND
①使用Between AND可以提高语句的简洁度
②包含临界值
③两个值不可以颠倒顺序

IN
含义：
①判断某字段的值是否属于in列表中的某一项
特点：
①使用in提高语句简洁度
②in列表的值类型必须统一或兼容
③in不支持通配符

IS null
用于判断null值

Is not null

①=或者<>不能用于判断null值
②is null或is not null可以判断null值 

*/

#1.Like 
#案例一：查询员工名中包含字符a的员工信息
SELECT *
FROM
    employees
WHERE 
    last_name LIKE '%a%';

#案例2：查询员工名中第三个字符为e，第五个字符为a的员工名和工资
SELECT last_name,salary
FROM employees
WHERE last_name LIKE '__e_a%';

#案例3：查询员工名中第二个字符为_的员工名
SELECT last_name
FROM employees
WHERE last_name LIKE '_$_%' ESCAPE '$';

#2.between AND
#案例1：查询员工编号在100和120之间的员工信息
SELECT *
FROM employees
WHERE employee_id between 100 and 120;

#3.IN
#案例：查询员工的工种编号是 IT_PROG,AD_VP,AD_PRES中的一个员工名和工种编号
SELECT 
    last_name
    job_id
FROM employees
WHERE job_id IN ('IT_PROT','AD_VP', 'AD_PRES')

#3.is null
#案例1:查询没有奖金的员工名和奖金率
SELECT
    last_name,
    commission_pct
FROM employees
WHERE
    commission_pct is null

#安全等于 <=>
#案例1:查询没有奖金的员工名和奖金率
SELECT
    last_name,
    commission_pct
FROM employees
WHERE
    commission_pct <=> null;
#IS null PK <=>
isnull：仅仅可以判断null值，可读性较高
<=>:既可以判断null值，又可以判断普通的数值，可读性较低

＃2.查询员工号为176的员工的姓名和部门号和年薪
SELECT 
last_name,
department_id,
salary*12*(1+IFNULL(commission_pct,0)) AS 年薪
FROM employees;

＃案例1：查询没有奖金，且工资小于18000的salary和last_name
SELECT salary,last_name
FROM employees
WHERE 
salary<18000
AND commission_pct IS null;

＃案例2:查询emloyee   s表中，job_id不为‘IT’
或者工资为12000的员工信息
SELECT *
From employees
WHERE salary＝12000
OR job_id <> 'IT';

＃案例3:经典面试题：
试问：SELECT ＊ FROM employee 和
SELECT ＊ From employees
WHERE commission_pct like '%%'
and last_name like '%%';
结果是否一样？并说明原因
不一样！
如果判断的字段有null值，如果所有字段都加上用or链接，这个会是一样的

＃进阶3:排序查询
语法

/＊
语法：SELECT 查询列表
     from 表
     ［Where 筛选条件］
     order by 排序列表［asc desc］
特点：
    1.asc代表升序，desc代表降序
    如果不写，默认是升序
    2.order by子句中可以支持单个或者多个字段，表达式和函数，别名
    3.order by子句一般放在查询语句的最后面 limit子句除外
*/
＃案例1：查询员工信息，要求工资从高到低排序
SELECT ＊
FROM employees
ORDER BY salary DESC；
SELECT ＊
FROM employees
ORDER BY salary ASC；
 
 ＃案例2：查询部门编号>=90的员工信息，按入职时间的先后
SELECT ＊
FROM employees
Where deparment_id>=90
ORDER BY hibredate ASC；

＃案例3：按年薪的高低显示员工的信息和年薪［按表达式排序］
SELECT ＊,salary*12*(1+Ifnull(commission_pct,0)) 年薪
FROM employees
ORDER BY salary*12*(1+Ifnull(commission_pct,0)) DESC;

＃案例4：按年薪的高低显示员工的信息和年薪［按别名排序］
SELECT ＊,salary*12*(1+Ifnull(commission_pct,0)) 年薪
FROM employees
ORDER BY 年薪 DESC;

＃案例5：按姓名的长度显示员工的姓名和工资［按函数排序］
SELECT Length(last_name) AS 字节长度,last_name,salary
FROM employees
ORDER BY Length(last_name) DESC;

＃案例6：查询员工信息，要求先按工资排序，再按员工编号排序
［按多个字段排序］
SELECT *
FROM employees
ORDER BY salary ASC,employee_id DESC;

＃案例1：查询员工的姓名和部门号和年薪，按照年薪降序，按姓名升序
SELECT last_name，department_id,salary*12*(1+Ifnull(commission_pct,0)) 年薪
From employees
ORDER BY 年薪 DESC, last_name ASC;

＃案例2：选择工资不在8000到17000的员工的姓名和工资，按工资降序
SELECT last_name，salary
FROM employee
WHERE salary NOT between 8000 AND 17000
ORDER BY salary desc;

＃案例3:查询邮箱中包含e的员工信息，并先按邮箱的字节数降序，再按部门号升序
SELECT *
FROM employees
WHERE email LIKE '%e%'
ORDER by Length(email) DESC, deparment_id ASC;

＃进阶4:常见函数
/＊
概念：类似于java的方法，将一组逻辑语句封装在方法体重，对外暴露方法名
好处:   1.隐藏了实现细节  2.提高了代码的重用性
调用：select 函数名(实参列表) [from表]；
特点：叫什么（函数名）干什么（函数功能）
分类：1.单行函数
    如concat length ifnull等
    分类：字符函数，数学函数，日期函数，其他函数［补充］，流程控制函数［补充］
    
    2.分组函数
    功能：做统计使用，又称为统计函数 聚合函数 组函数
*/

＃一 字符函数
＃1.length 获取参数值的字节个数
SELECT Length('john');
SELECT Length('张三丰hahaha');

＃2.conct 拼接字符串
SELECT Concat(last_name,'_',first_name);
FROM employees

＃3.upper,lower
SELECT Upper('john');
SELECT lower('joHn');
#案例：将姓变大写 名变小写 然后拼接
SELECT CONCAT(UPPER(last_name),Lower(first_name)) 姓名
FROM employees;

#4.substr,substring
注意：索引从1开始
#截取从指定索引处后面所有字符
SELECT substr('李莫愁爱上了陆展元',7) out_put;

#截取从指定索引处指定字符长度的字符
SELECT substr（'李莫愁爱上了陆展元',1,3）out_put;

＃案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来
SELECT CONCAT（UPPER(SUBSTR(last_name,1,1)),'_',lower(substr(last_name,2))) out_put
FROM employees

#5.instr 返回子串第一次出现的索引 如果找不到返回0
SELECT instr('杨不悔爱上了殷六侠'，‘殷六侠’) as Out_put
from employees
结果返回：7

#6.trim 
SELECT Length（trim('      张翠山     ') as Out_put
from employees

SELECT TRIM('aa‘ FROM ’aaaaa张aaaaaa翠山aaaaa') as Out_put
结果返回：‘a张aaaaaa翠山a’

#7.lpad 用指定的字符实现左填充指定长度
SELECT LPAD（'殷素素',10,'*') as Out_put
from employees

#8.rpad 用指定的字符实现右填充指定长度
SELECT RPAD（'殷素素',12,'ab') as Out_put
from employees
结果返回：殷素素ababababa

#9.replace 用指定的字符实现右填充指定长度
SELECT replace（'张无忌爱上了周芷若',周芷若,'赵敏') as Out_put
from employees
结果返回：周芷若被赵敏替换了

＃二 数学函数
#round 四舍五入
SELECT Round（1.65);
结果返回：2
SELECT Round(1,567,2);
结果返回：1.57

#ceil 向上取整，返回大于等于该参数的最小整数
SELECT Cell（1.52);
结果返回：2
SELECT Cell（1.02);
结果返回：2
SELECT Cell（-1.02);
结果返回：-1

#floor 向下取整，返回小于等于该参数的最大整数
 SELECT floor（-9.99);
 结果返回：-10

 #truncate 截断
 SELECT truncate（1.699999，1);
 结果返回：1；

#mod 取余
  mod(a,b); a-a/b*b

 SELECT mod（10，-3);
 结果返回：1；

＃三，日期函数
 ＃now 返回当前系统日期＋时间
 SELECT NOW;

 ＃curdate 返回当前系统日期，不包含时间
 SELECT CURDATE();
 
 # Curtime 返回当前时间，不包含日期
 SELECT Curtime()；

 # 可以获取指定的部分 年月日等等
 SELECT Curtime()；

＃month monthname day hour minute second str_to_date date_format
其他函数；
VERSION
database
user

＃五 流程控制函数
＃1.if函数：if else的效果
SELECT IF(10<5,'大','小')；
SELECT last_name,commission_pct,if(commission_pct IS NULL,'1','2') 备注
From employees;

＃case函数的使用一：
类似java中switch case的效果
／*
case 要判断的字段或表达式
when 常量1 then 要显示的值1或语句1
when 常量2 then 要显示的值2或语句
...
else 要显示的值n或者语句n
end
*/

#案例1：查询员工的工资，要求
部门号＝30，显示的工资为1.1倍
部门号＝40，显示的工资为1.2倍
部门号＝50，显示的工资为1.3倍
其他部门，显示的工资为原来的工资

SELECT salary 原始工资, department_id, 
CASE department_id 
when 30then salary*1.1
when 40 then salary*1.2
when 50 then salary*1.3
ELSE salary
END as 新工资
as employees；

＃case函数的使用二：类似于 多重if
／*
case
when 条件1 then 要显示的值1或语句1
when 条件2 then 要显示的值2或语句2
...
else 要显示的值n或者语句n
end
*/

#案例:查询员工的工资的情况
如果工资>20000,显示A级别
如果工资>15000,显示B级别
如果工资>10000,显示c级别
否则显示D级别
SELECT salary,
CASE
WHEN salary>20000 then 'A'
WHEN salary>15000 then 'B'
WHEN salary>10000 then 'C'
ELSE 'D'
END AS 工资级别
From employees；

本章练习
＃1.显示系统时间（备注：日期＋时间）
SELECT NOW();

＃2.查询员工号 姓名 工资以及工资提高百分之20％后的结果(new salary)
SELECT employee_id,last_name,salary,salary*1.2 as new salary
from employees；

＃3.将员工的姓名按照首字母排序，并写出姓名的长度（length）
SELECT length(last_name) 长度,substr(last_name,1,1) 首字符, last_name
from employees
order by 首字符;

二：分组函数
／＊
功能：用作统计使用，又称为聚合函数或统计函数或组函数
分类：sum求和，avg平均值，max最大值，min最小值，count计算个数
特点：
1 sum ave一般用于处理数值型
  max min count可以处理任何类型
2.以上分组函数都忽略null
3.和distinct搭配实现去重的运算
    SELECT SUM（DISTINCT salary),sum(salary) 
    From employees；
4.count函数的详细介绍
    SELECT count(salary) FROM employees；
    SELECT count(*) from employees 用作统计行数
    SELECT count(1) from employees 用作统计行数
    SELECT count('崔侠') from employees，相当于多了一列‘崔侠’
5.和分组函数一同查询的字段有限制
    SELECT AVE (salary),employee_id From employees；
5.和分组函数一同查询的字段要求是group by后的字段

＃进阶5:分组查询
/*语法：
SELECT 分组函数，列（要求出现在group by的后面）
from 表
Where 筛选条件
group by 分组的列
order 子句
注意：查询列表必须特殊，要求是分组函数和group by后出现的字段
特点：1.分组筛选中的筛选条件氛围两类
分组前筛选 原始表
分组后筛选 分组后的结果集
分组函数做条件肯定是放在having子句中
能用分组前筛选的就优先考虑分组前筛选
2.group by子句支持单个字段分组，也支持多个字段分组（多个字段之间用逗号隔开，没有顺序要求），表达式或者
函数用的（用的比较少）
3.也可以添加排序（放在整个分组查询之后）
/

＃引入：查询每个部门的平均工资

＃案例1:查询每个工种的最高工资
SELECT MAX(salary),job_id
From employees
group by job_id

＃案例1:查询每个位置上的部门个数
SELECT Count(*),location_id
From departments
Group by job_id;

添加筛选条件
＃案例1:查询邮箱中包含a字符的，每个部门的平均工资
SELECT AVG(salary),deparment_id
From employees
WHERE email like 'a'
group by deparment_id; 

＃案例2:查询有奖金的每个领导手下员工的最高工资
SELECT max(salary),manager_id
From employees
WHERE commission_pct is not null
Group by manager_id;

＃案例3:添加复杂的筛选条件
＃案例1:查询哪个部门的员工个数>2
＃查询每个部门的员工个数，根据1的结果进行筛选，查询哪个部门的员工个数>2

SELECT Count(*),department_id
From employees
Group by deparment_id
Having Count(*)>2;

#案例2：查询每个工种有奖金的员工的最高工资>12000
SELECT MAX(salary),job_id,employee_id
FROM employees
WHERE commission_pct is not null
Group by job_id
Having MAX(salary)>12000;

#案例2：查询领导编号>102的每个领导手下的最低工资>5000 的领导编号是哪个，以及其最低工资
SELECT manager_id,min(salary)
From  employees
WHERE manager_id>102
group by manager_id
Having min(salary)>5000; 

#按表达式分组或函数分组
按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数>5的有哪些
SELECT Count(*) c,length(last_name) len_name
From employees
Group by len_name
Having c>5;

#按多个字段分组
#案例：查询每个部门每个工种的员工的平均工资
SELECT AVG(salary),department_id,job_id
From employees
Group By department_id,job  

练习：
#1.查询各job_id的员工工资的最大值，最小值，平均值，总和，并按照job_id升序
略
#2.查询员工最高工资和最低工资的差距
SELECT MAX(salary)-min(salary) Difference
From employees;

#进阶6：链接查询
/*
含义：又称多表查询，当查询的字段来源于多个表时，就会用到链接查询
笛卡尔乘积现象：表1有m行，表2有n行，结果是m*n行
发生原因：没有有效的链接条件
如何避免：添加有效的链接条件
按功能分类：内链接：
                等值链接
                非等值链接
                自链接
          外链接：
                 左外链接
                 右外链接   
                 全外链接
          交叉链接：
 
/

1.等值链接
1.多表等值链接的结果为多表的交集部分
2.n表链接，至少需要n－1个链接条件
3.多表的顺序没有要求
4.一般需要为表起别名
5.可以搭配前面介绍的所有字句
＃案例1:SELECT NAME,boyName From boyes,beauty
WHERE beauty.boyfriend_id=boys.id;

＃案例2:查询员工名和对应的部门名
SELECT last_name,department_name
FROM employees,departments
WEHRE employees.'deparment_id'=departments.'department_id';

#2.为表起别名
/*
提高语句的简洁度
区分多个重名的字段
注意：如果为表起了别名，则查询字段就不能使用原来的表名去限定
*/

#可以加筛选
＃案例1：查询员工名，工种号，工种名
SELECT e.last_name,e.job_id,j.job_title
FROM employee e,jobs j
WHERE e.'job_id'=j.'job_id';

＃案例1：查询有奖金的员工名，部门名
SELECT last_name,department_id,commission_pct
FROM employees e,department_id D
Where e.'department_id'=d.'deparment_id'
AND e.'commission_pct' IS NOT NULL;

＃案例2：查询城市中第二个字符为o的部门名和城市名
SELECT department_name,city
From departments D,locations L
Where d.'location_id'=l.location_id
AND city LIKE '_o%';

#5.可以加分组
#案例1：查询每个城市的部门个数
SELECT Count(*) 个数，city
From departments d,location L
WEHRE d.location_id=l.location_id
Group by City;

#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资
SELECT department_name,d.manager_id,MIN(salary)
From departments d, employees e
Where d.department_id=e.department_id
AND commission_pct IS NOT NULL
Group by department_name,d.manager_id

#6.可以加排序
#案例：查询每个工种的工种名和员工的个数，并且按照员工个数降序；
SELECT job_title,Count(*)
FROM jobs j,employees e
WHERE j.job_id=e.job_id
Group by e.job_title
ORDER by Count(*);

#7.可以实现三表链接
＃案例：查询员工名，部门名和所在的城市

＃2.非等值链接
＃案例1:查询员工的工资和工资级别
SELECT salary,grade_level
From employees e,job_grades g
WHERE salary between g.'lowest_sal' and g.'highest_sal'
AND g.'grade_level'='A'

＃二.sql999语法
／＊
语法：  SELECT 查询列表
       from 表1 别名［连接类型］
       join 表2 别名
       on 链接条件
       ［where］筛选条件
       ［group by 分组］
       ［having 筛选条件］
       ［order by 排序列表］
分类：
内连接（）：inner
外连接
    左外：left[outer]
    右外: right[outer]
    全外: full[outer]
交叉链接: cross join
＊
／
案例：查询 员工名和上级的名称

#一）内连接
／＊
语法：略

分类：
等值
非等值
自连接

特点：
1.添加排序 分组 筛选
2.inner 可以省略
3.筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读
＊／

1.等值连接
＃案例1：查询员工名，部门名
＃案例2：查询名字中包含e的员工名和工种名（添加筛选）
引入Where
＃案例3:查询部门个数>=3的城市名和部门个数
SELECT city,count(*) 部门个数
FROM deparments D
Inner Join locations L
on d.'location_id'=l.'location_id'
Group by city
Having count(*)>3; 

#二）非等值链接
#查询员工的工资和工资级别
SELECT salary，grade_level
Join job_grades g
on e.'salary' Between g.'lowest_salary' And g.'highest_sal';

#二 外连接
#引入：查询没有男朋友的女神名
/*
应用场景：用于查询一个表中有，另一个表没有的记录

特点：
1.外连接的查询结果为主表中的所有记录，如果从表中有和它匹配，则显示匹配的值，如果没有则显示null
2.左外链接，left join左边的是主表  
  右外连接，right join右边的是主表
3.左外和右外交换两个表的顺序，可以实现同样的效果
4.全外链接=内连接的结果＋表1有但是表2没有＋表2有但是表1没有

＃交叉链接
笛卡尔乘积


＃进阶7:子查询
／＊
含义：出现在其他语句中的select语句，称为子查询或内查询
      内部嵌套其他select语句的查询，成为外查询或主查询
例子：
select first_name from employees Where
department_id in(
    select department_id from deparments
    where location_id=1700)
分类：
按子查询出现的位置：
select后面：仅仅支持标量子查询
from后面：支持表子查询
where或having后面：标量子查询；列子查询；行子查询
exists后面（相关子查询）表子查询

按结果集的行列数不同
    标量子查询（结果集只有一行一列）
    列子查询（结果集只有一列多行）
    行子查询（结果集有一行多列）
    表子查询（结果集一般为多行多列）


＃一：where或having后面
／＊
1.标量子查询（结果集只有一行一列）
2.列子查询（多行子查询）
3.行子查询（多列多行）

特点：
1.子查询放在小括号内
2.子查询一般放在条件的右侧
3.标量子查询，一般搭配着单行操作符使用
><>= <= <>
列子查询：一般搭配着多行操作符使用
in any some all
4.子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果
*/

＃1.标量子查询
＃1.查询最低工资 大于50号部门 最低工资的部门id和其最低工资
STEP1:查询50号部门的最低工资
SELECT min(salary)
From employees
where department_id=50
STEP2:查询每个部门的最低salary
SELECT min(salary),deparment_id
From employees
Group by deparment_id

STEP3:在2基础上筛选STEP2，是否>step1的数值，如果有的话显示其部门id和其最低工资
SELECT min(salary),deparment_id
From employees
Group by deparment_id
Having min(salary)>(
    SELECT min(salary)
    From employees
    where department_id=50
    )

＃非法使用标量子查询：子查询必须是一行一列，否则

＃2.列子查询(一列，多行子查询)
返回多行，使用多行比较操作符
操作符及含义：
操作符          含义
In／Notin      等于列表中的任意一个
Any／some      和子查询返回的某个值比较
ALL            和子查询返回的所有值比较
体会any和all的区别

＃案例1:返回location_id是1400或1700的部门中的所有员工姓名
SELECT last_name
From employees
WHERE deparment_id IN
(
    SELECT DISTINCT deparment_id
    From deparments
    Where location_id IN (1400,1700)
);

＃案例2:返回其他部门中比job_id为‘IT_Frog’部门任意工资低的员工的
员工号 姓名 job_id 以及 salary
STEP1：找到IT_frog的工资
select DISTINCT salary
from employees
where job_id='IT_PROG'

select last_name,employee_id,job_id,salary
from employees
Where salary<
ANY(select salary
from employee
where department_name=IT_PROG)
AND 
job_id<>'IT_FROG'

#3.行子查询（结果集一行多列或多行）
＃案例：查询员工编号最小并且工资最高的员工信息
SELECT ＊
From employees
Where (employee_id,salary)=
    (SELECT min(employee_id),max(salary)
    From employee)

#二.select后面
/*
仅仅支持标量子查询
＊／

案例：
SELECT d.*,(
            select count(*)
            from employees employees e
            Where e.department_id=d.deparment_id 
            ) 个数
From department_id;

#三.from后面

#案例：查询每个部门的平均工资的工资等级
SELECT ag_dpt.*,g.grade_level
FROM(
    SELECT AVG(salary) ag,deparment_id
    From employees
    Group by deparment_id
)ag.dep
Inner Join job_grades g
On ag_dpt.ag Between lowest_sal AND highest_sal

#四.exists后面（相关子查询）
/*
语法:
exists后面（完整的查询语句）
结果返回：
1或0
/

SELECT EXIST(SELECT employee_id from employees);

P94 

#进阶8：分页查询
/*
应用场景：当要显示的数据一页显示不全，需要分页提交sql请求 
语法：  
    Select 查询列表
    from 表名
    【join type】join 表2
    on 连接条件
    where 筛选条件
    group by 分组字段
    having 分组后的筛选
    order by 排序的字段
    limit offset,size；
    
    offset要显示条目的起始索引（起始索引从0开始）
    size 要显示的条目个数
特点：
    ①limit语句放在查询语句的最后
    ② 公式
    要显示的页数page，每页的条目数size
    select 查询列表
    from 表
    limit (page-1)*size.size;

*/

#案例1：查询前五条员工信息
SELECT *
From employees
LIMIT 0，5；
 
#案例2：查询第11条-第25条
SELECT * 
From employees
LIMIT 10，15；

#案例3：有奖金的员工信息，并且工资较高的前10名显示出来
SELEC *
From employees
WHERE commission_pct IS NOT null
ORDER by salary DESC
LIMIT 10;


97复习
96/98/99/92 地铁补；

#进阶9：联合查询
/*
union 联合 合并：将多条查询语句的结果合并成1个结果

语法：
查询语句1
union
查询语句2
union...

应用场景：
要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致的时候

特点：
1.要求多条查询语句的查询列数是一致的！
2.要求多条查询与的查询的每一列的类型和顺序最好一致
3.union关键字默认去重，如果使用union all可以包含重复项

/
#引入的案例：查询部门编号>90或邮箱中包含a的员工信息
SELECT *
from employees
where email like '%a% or
deparment_id>90;

SELECT * from employees where email like '%a%'
UNION
SELECT * from employees where deparment_id > 90;


SQL结构化查询语言包含6个部分
1.数据查询语言（DQL: Data Query Language）
数据检索语句，用于从表中获取数据。通常最常用的为保留字SELECT,并且常与FROM子句、WHERE子句组成查询SQL查询语句。
语法：SELECT <字段名> FROM <表或视图名> WHERE <查询条件>;

2.数据操纵语言（DML：Data Manipulation Language）
主要用来对数据库的数据进行一些操作，常用的就是INSERT、UPDATE、DELETE。
语法： INSERT INTO <表名>(列1,列2,...) VALUES (值1,值2,...); UPDATE <表名> SET <列名>=新值 WHERE <列名>=某值;
DELETE FROM <表名> WHERE <列名>=某值;

#DML语言
/*
数据操作语言：涉及到数据的插入，修改和删除，常用的就是INSERT、UPDATE、DELETE。
/

#一：插入语句
/*
语法：
insert into 表名(列名,...)
values(值1,....)
/

方式1:
#1.插入的值的类型要与列的类型一致或兼容
＃2.可以为null的列如何插入值
要么列和值都省略，要么列加着，但是值为nulL
＃3.列的顺序是否可以调换
可以，但是列和值必须一一对应
＃4.列数和值的个数必须一致
＃5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致
Insert into beauty
VAlues(......)

＃方式2:
／＊
语法： 
insert into 表名
set 列名＝值，列名＝值，...
＊／

两种方式大PK
1.方式1支持插入多行，方式2不支持
2.方式1支持子查询，方式2不支持

＃二 修改语句
／＊
1.修改单表的记录
语法：
update 表名
set 列＝新值...
Where
2.修改多表的记录［补充］
语法：
sql199语法
update 表1 别名
inner left right join 表2 别名
on 连接条件
set 列＝值,...
where 筛选条件
*／

#1.修改单表的记录
＃2.修改多表的记录

＃三 删除语句
／＊
方式1：delete
语法：
1.单表的删除
delete from 表名 where 筛选
2.多表的删除

方式2：truncate
语法：truncate table 表名
／

＃方式1:delete
＃1.单表的删除
＃案例1:删除手机号以9结尾的女神的信息
DELETE FROM beauty
where phone like '%9'
#2.多表的删除
＃案例：删除张无忌的女朋友的信息
sql 192语法：
delete 表1的别名，表2的别名
from 表1 别名，表2 别名
where 连接条件
and 筛选条件；

sql199语法：
delete 表1的别名，表2的别名
from 表1 别名
inner／left／right join 表2 别名 on 链接条件
where 筛选条件；

＃案例：删除张无忌的女朋友的信息
如果两个表都删除，则
DELETE b
From beauty b
inner join boys bo
on b.boyfriend_id=bo.id
where bo.'boyName'='张无忌'

＃案例：删除黄晓明的信心以及他女朋友的信息
如果两个表都删除，则
DELETE b，bo
From beauty b
inner join boys bo
on b.boyfriend_id=bo.id
where bo.'boyName'='黄晓明'；

＃方式二：truncate语句
＃案例：将魅力值>100的男神信息删除
truncate table boys;

#delete PK truncate
1. delete 可以加where条件，truncate不能加
2.假如要删除的表中有自增长列，
如果用delete删除后，再插入数据，自增长列的值从断点开始
而truncate删除后，再插入数据，自增长列的值从1开始 
3.truncate 删除没有返回值，delete删除有返回值
4.truncate删除不能回滚，delete删除可以回滚

数据定义语言（DDL）
常用的有CREATE和DROP，用于在数据库中创建新表或删除表，以及为表加入索引等。
＃DDL
／＊
数据定义语言
库和表的管理
一 库的管理
创建，修改，删除
一 表的管理
创建，修改，删除

创建：create
修改：alter
删除：drop

＃一 库的管理
1.库的创建
／＊
语法：create database [if not exists]库名;
*／

#案例：创建库books
CREATE DATABASE IF NOT exists books;
如果已经存在就不创建了，否则就创建
 
#2.库的修改
#更改库的字符集
ALTER DATABASE books CHARACTER SET gbk;

#3.库的删除
DROP DATABASE IF EXISTS Books;

#二 表的管理
#1.表的创建
略

#2.表的修改
/*
alter table 表名 add;drop/modify/change COLUMN
/
#①修改列名
ALTER TABLE score CHANGE COLUMN score scores decimal;
#②修改列的类型或者约束
ALTER TABLE score MODIFY COLUMN scores VARCHAR;
#③添加新列
ALTER TABLE score ADD COLUMN name VARCHAR;
#④删除列
ALTER TABLE score DROP COLUMN name VARCHAR;
#⑤修改表名
ALTER TABLE score RENAME TO newscore;

#3.表的删除
DROP TABLE if exisit bookauthor;
CRATE TABLE 

#4.表的复制
#1.仅仅复制表格的结构
CREATE table copy like  score;

#2.复制表格的结构+数据（可以跨库但是要标记清楚）
create table copy2
select * from author；

#3.只复制部分数据
create table copy3
select id,au_name
from author
where nation='中国';

#4.仅仅复制某些字段
CREATE TABLE copy4
SELECT id,au_name
FROM author
where 1=2;

＃常见的数据类型
／＊
数值型：
    整数
    小数：
        定点数
        浮点数
字符型：
    较短的文本：char，varchar
    较长的文本：test，blob（较长的二进制数据）
日期型：
／

＃一 整型
／＊
分类：
tinyint,smallint,mediumint,int/integer,bigint
1       2          3         4          8
特点：
1.如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned关键字
2.如果插入的数值超过了整数的范围，会报out of range异常，并且插入临界值
3.如果不设置长度，会有默认的长度
长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用！
／

＃二 小数
／＊
1.浮点型
float(M,D)
double(M,D)
2.定点型
dec(M,D)
特点： 
1. M：整数部位＋小数部位 D：小数部位 如果超过范围，则插入临界值
2.M和D都可以省略，如果是decimal，则M默认为10，D默认为0
如果是float和double，则会根据插入数值的精度来决定精度
3.定点型的精确度较高，如果要求插入数值的精度较高比如货币运算等则考虑使用
4.原则：所选择的类型越简单越好
／

＃三 字符型
／＊
说明：用来保存mysql中较短的字符串
较短的文本：char(M)，varchar(M)
    char代表固定长度的字符，varchar代表可变长度的字符

较长的文本：test，blob（较长的二进制数据）
特点：char 写法char(M),M代表最多的字符数,特点是固定长度的字符，比较耗费空间
    varchar 写法varchar(M)，M代表最大的字符数，特点是可变长度的字符，比较节省空间
／

＃四 日期型
／＊
分类：
date只保存日期
time只保存时间
year只保存年
datetime和timestamp都保存时间和日期
特点：叫什么（函数名）干什么（函数功能）
             字节            范围            时区等的影响
datetime      8             1000－9999       不受
timestamp     4             1970-2038        受         
／

＃常见约束
／＊
含义：一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性
分类：六大约束
        not null：非空，用于保证该字段的值不能为空，比如姓名学号等
        default：默认，用于保证该字段有默认值
        Primary Key：主键，用于保证该字段的值具有唯一性，并且非空，比如学号，员工编号等
        Unique：唯一，用于保证该字段的值具有唯一性，但是可以为空，没有primary key严谨，比如座位号 
        check：检查约束［mysql中不支持，语法不报错，但是不支持 ］比如年龄性别
        Foreign Key：外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值
        在从表添加外键约束，用于引用主表中某列的值，比如专业编号，员工表的部门编号，工种编号等

添加约束的时机：
    1.创建表时
    2.修改表时

约束的添加分类：
    列级约束：
        六大约束语法上都支持，但是外键约束没有效果
    表级约束：
        除了not null(非空)和default(默认)，其他的都支持

主键和唯一的大对比
        保证唯一性  是否允许为空                          一个表中可以有多少个       是否允许组合
    PK  唯一       不可为空                                 最多有一个             允许但是不推荐
    Uni 唯一       可以，但是只允许1个为空，再有一个就不可以了   可以有多个              允许但是不推荐

外键：
    1.要求从表设置外键关系
    2.从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求
    3.主表的关联列必须是一个key(主键，唯一)
    4.插入数据时，先插入主表，再插入从表
    删除数据的死后，先删除从表，再删除主表

＊／


＃一：创建表的时候添加约束
＃1.添加列级约束
／＊语法：
直接在字段名和类型后面追加约束类型即可／
只支持：默认 非空 主键 唯一 check和外键都不支持
＊／

例子：
USE students;
CREATE TABLE stuinfo(
    id INT PRIMARY key,#主键
    stuName Varchar(20) NOT NULL,#非空
    gender char(1) CHECK(gender='男' OR gender='女'),#检查
    seat int unique,#唯一
    age int default 18,#默认约束
    majorId INT REFERENCES major(id) #外键
)；
CREATE TABLE major(
    id INT PRIMARY KEY,
    majorName VARCHAR(20)
);

查看约束：
DESC stuinfo;

＃查看stuinfo表中所有的索引，包括主键，外键，唯一
SHOW INDEX FROM studinfo;

＃2.添加表级约束
/*
语法:在各个字段的最下面
[constraint 约束名] 约束类型(字段名)
*/
DROP TABLE if exists stuinfo;
CREATE TABLE stuinfo(
    id int,
    stuname varchar(20),
    gender CHAR(1),
    seat int
    age int
    majorid int,
    constraint pk PRIMARY KEY(id),#主键
    constraint uq UNIQUE(seat,)#唯一键
    constraint ck  check(gender='男' or gender='女'),#检查
    constraint fk_stuinfo_major Foreign Key(majorid) REFERENCES major(id) #外键
);
SHOW INDEX FROM studinfo;

＃二 修改表时添加约束
/*
1.添加列级约束
alter table 表名 modify column 字段名 字段类型 新约束
2.添加表级约束
alter table 表名 add［constraint 约束名］约束类型(字段名)
/

＃1.添加非空约束
ALTER TABLE stuinfo modify column stuname VARCHAR(20) NOT NULL
＃2.添加默认约束
ALTER TABLE stuinfo modify column age INT DEFAULT 18;

＃3.添加主键
＃1.列级约束
ALTER TABLE stuinfo modify column id INT Primary KEY;
＃2.表级
ALTER TABLE stuinfo ADD PRIMARY KEY(id);

#4.添加唯一
＃1.列级约束
ALTER TABLE stuinfo modify column seat INT UNIQUE
＃2.表级约束
ALTER TABLE stuinfo ADD UNIQUE(seat);

#5.添加外键
ALTER TABLE stuinfo ADD constraint fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id);

＃三 修改表时删除约束
＃1.删除非空约束
ALTER table stuinfo modify column stuname varchar(20) null;

＃2.删除默认约束
ALTER table stuinfo modify column age int;

＃3.删除主键
ALTER table stuinfo drop PRIMARY key;

#4.删除唯一
ALTER table stuinfo drop index seat; 

#4.删除外键
ALTER table stuinfo drop Foreign key fk_stuinfo_major; 

#标识列
/*又称为自增长列
含义：可以不用手动改的插入值，系统提供默认的序列值
特点：
1.标识列必须和主键搭配吗？不一定 但要求是一个Key
2.一个表可以有几个标识列？最多一个!
3.标识列的类型只能是数值型
4.标识列可以通过 set auto_increment_increment=3;设置步长
可以通过手动插入值，设置起始值
*/

#一，创建表的时候设置标识列
CREATE TABLE tab_identity
    (id INT Primary Key auto_increment,
     NAME VARCHAR(20)
    );
INSERT INTO tab_identity(id,name) VALUES(NULL,'Join')
SHOW VARIABLES LIKE '%auto_increment%'
(可以设置起始值和步长，mysql中起始值设置没有效果，步长是有效果的)
set auto_increment_increment=3;
设置起始值可以在insertvalue 的时候，INSERT INTO tab_identity(id,name) VALUES(10,'Join')

#二 修改表的时候设置标识列
ALTER TABLE tab_identity Modify column id INT PRIMARY KEY auto_increment;

#三 修改表时删除标识列
ALTER TABLE tab_identity Modify column id INT;

#TCL
/*
Transaction Control Language 事务控制语言
事务：
一个或一组sql语句组成

/


